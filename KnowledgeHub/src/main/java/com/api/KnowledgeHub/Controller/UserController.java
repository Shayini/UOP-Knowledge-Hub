package com.api.KnowledgeHub.Controller;

import com.api.KnowledgeHub.Model.User;
import com.api.KnowledgeHub.Repository.User_repository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;


@CrossOrigin(origins = "http://localhost:8081")
@RestController
//Encapsulating @Controller + @ResponseBody annotations,@RestController means that this class is a Controller.
@RequestMapping(path="/Project/REST-API") //This means URL's start with /Project/REST-API (after Application path).
public class UserController {
    @Autowired
    // This means to get the bean called User_Repository which is auto-generated by Spring, we will use it to handle the data.
    private User_repository userRepository;


    @GetMapping(value="/login", params = { "userName", "password" }) //Map ONLY GET Requests and means URL's start with /login/{userName}(after Application path).
    public Optional findByUserName(@RequestParam("userName") String username, @RequestParam("password") String password) {
        //@PathVariable is used to extract data right from the URI.It is used to retrieve values from URI itself.
        return userRepository.findByUserName(username);
        //Java Optional can help in writing neat code without using too many null checks.
    }

    @GetMapping(value="/admin") //Map ONLY GET Requests and means URL's start with /login/{userName}(after Application path).
    public Optional findAdmin(@RequestParam("userName") String username) {
        //@PathVariable is used to extract data right from the URI.It is used to retrieve values from URI itself.
        return userRepository.findByUserName(username);
        //Java Optional can help in writing neat code without using too many null checks.
    }

    @GetMapping(value="/userdetails") //Map ONLY GET Requests and means URL's start with /login/{userName}(after Application path).
    public Iterable findUserDetails() {
        //@PathVariable is used to extract data right from the URI.It is used to retrieve values from URI itself.
        return userRepository.findAll();
        //Java Optional can help in writing neat code without using too many null checks.
    }

    @PostMapping("/signup") // Map ONLY POST Requests and means URL's start with /signin (after Application path).
    @ResponseBody // @ResponseBody means the returned Integer is the response, not a view Id.
    public User signup(@RequestBody User user) { //@RequestBody annotation is used to bind the HTTP request/response body with a domain object in method parameter or return type.
        userRepository.save(user); //Inherited save() method is used here.
        return user;

    }

    @PostMapping("/signupparam") // Map ONLY POST Requests and means URL's start with /add (after Application path).
    @ResponseBody // @ResponseBody means the returned Integer is the response, not a view Id.
    public String addURL(@RequestParam Integer userID,@RequestParam String userName,@RequestParam String email, @RequestParam String password, @RequestParam String status) {
        //@RequestParam annotation is used to obtain a parameter from the URL.

        User user = new User(); //Instantiating the Project class.
        user.setUserID(userID); //Invoking the setProjectID() method.
        user.setUserName(userName); //Invoking the setProjectAuthor() method.
        user.setEmail(email); //Invoking the setProjectName() method.
        user.setPassword((password));
        user.setStatus(status);
        userRepository.save(user); //Inherited save() method is used here.
        return "Response Is Successfully Added"; //Method addURL returning the String.

    }

    @DeleteMapping(value="/deleteuser")
    public String deleteUser(@RequestParam String username) {
        userRepository.deleteByUserName(username);

        return "User succesfully deleted!";
    }

}
